generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model v2_user {
  id                 Int       @id @default(autoincrement())
  invite_user_id     Int?
  telegram_id        BigInt?
  email              String    @unique(map: "email") @db.VarChar(64)
  password           String    @db.VarChar(64)
  password_algo      String?   @db.Char(10)
  password_salt      String?   @db.Char(10)
  balance            Int       @default(0)
  discount           Int?
  commission_type    Int       @default(0) @db.TinyInt
  commission_rate    Int?
  commission_balance Int       @default(0)
  t                  Int       @default(0)
  u                  BigInt    @default(0)
  d                  BigInt    @default(0)
  transfer_enable    BigInt    @default(0)
  banned             Boolean   @default(false)
  is_admin           Boolean   @default(false)
  last_login_at      Int?
  is_staff           Boolean   @default(false)
  last_login_ip      Int?
  uuid               String    @db.VarChar(36)
  group_id           Int?
  plan_id            Int?
  speed_limit        Int?
  remind_expire      Int?      @default(1) @db.TinyInt
  remind_traffic     Int?      @default(1) @db.TinyInt
  token              String    @db.Char(32)
  expired_at         BigInt?   @default(0)
  device_limit       Int?
  online_count       Int?
  last_online_at     DateTime? @db.Timestamp(0)
  remarks            String?   @db.Text
  created_at         Int
  updated_at         Int

  @@index([created_at], map: "v2_user_created_at_index")
  @@index([online_count], map: "v2_user_online_count_index")
  @@index([t], map: "v2_user_t_index")
  @@index([u, d, expired_at, group_id, banned, transfer_enable], map: "v2_user_u_d_expired_at_group_id_banned_transfer_enable_index")
}

model v2_emby {
  id          Int      @id @default(autoincrement())
  user_id     Int
  telegram_id BigInt
  emby_id     String   @db.VarChar(64)
  username    String   @db.VarChar(64)
  password    String   @db.VarChar(64)
  created_at  DateTime @db.DateTime(0)
  updated_at  DateTime @updatedAt @db.DateTime(0)

  @@index([telegram_id], map: "telegram_id")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model v2_commission_log {
  id             Int    @id @default(autoincrement())
  invite_user_id Int
  user_id        Int
  trade_no       String @db.Char(36)
  order_amount   Int
  get_amount     Int
  created_at     Int
  updated_at     Int

  @@index([created_at], map: "v2_commission_log_created_at_index")
  @@index([get_amount], map: "v2_commission_log_get_amount_index")
}

model v2_coupon {
  id                  Int     @id @default(autoincrement())
  code                String  @db.VarChar(255)
  name                String  @db.VarChar(255)
  type                Int
  value               Int
  show                Boolean @default(false)
  limit_use           Int?
  limit_use_with_user Int?
  limit_plan_ids      String? @db.VarChar(255)
  limit_period        String? @db.VarChar(255)
  started_at          Int
  ended_at            Int
  created_at          Int
  updated_at          Int
}

model v2_invite_code {
  id         Int     @id @default(autoincrement())
  user_id    Int
  code       String  @db.Char(32)
  status     Boolean @default(false)
  pv         Int     @default(0)
  created_at Int
  updated_at Int
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model v2_knowledge {
  id         Int     @id @default(autoincrement())
  language   String  @db.Char(5)
  category   String  @db.VarChar(255)
  title      String  @db.VarChar(255)
  body       String  @db.Text
  sort       Int?
  show       Boolean @default(false)
  created_at Int
  updated_at Int
}

model v2_log {
  id         Int     @id @default(autoincrement())
  title      String  @db.Text
  level      String? @db.VarChar(11)
  host       String? @db.VarChar(255)
  uri        String  @db.VarChar(255)
  method     String  @db.VarChar(11)
  data       String? @db.Text
  ip         String? @db.VarChar(128)
  context    String? @db.Text
  created_at Int
  updated_at Int
}

model v2_mail_log {
  id            Int     @id @default(autoincrement())
  email         String  @db.VarChar(64)
  subject       String  @db.VarChar(255)
  template_name String  @db.VarChar(255)
  error         String? @db.Text
  created_at    Int
  updated_at    Int
}

model v2_notice {
  id         Int     @id @default(autoincrement())
  sort       Int?
  title      String  @db.VarChar(255)
  content    String  @db.Text
  show       Boolean @default(false)
  img_url    String? @db.VarChar(255)
  tags       String? @db.VarChar(255)
  created_at Int
  updated_at Int

  @@index([sort], map: "v2_notice_sort_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model v2_order {
  id                        Int     @id @default(autoincrement())
  invite_user_id            Int?
  user_id                   Int
  plan_id                   Int
  coupon_id                 Int?
  payment_id                Int?
  type                      Int
  period                    String  @db.VarChar(255)
  trade_no                  String  @unique(map: "trade_no") @db.VarChar(36)
  callback_no               String? @db.VarChar(255)
  total_amount              Int
  handling_amount           Int?
  discount_amount           Int?
  surplus_amount            Int?
  refund_amount             Int?
  balance_amount            Int?
  surplus_order_ids         String? @db.Text
  status                    Int     @default(0)
  commission_status         Int     @default(0)
  commission_balance        Int     @default(0)
  actual_commission_balance Int?
  paid_at                   Int?
  created_at                Int
  updated_at                Int

  @@index([commission_balance], map: "v2_order_commission_balance_index")
  @@index([commission_status], map: "v2_order_commission_status_index")
  @@index([created_at], map: "v2_order_created_at_index")
  @@index([invite_user_id], map: "v2_order_invite_user_id_index")
  @@index([status], map: "v2_order_status_index")
  @@index([total_amount], map: "v2_order_total_amount_index")
  @@index([updated_at], map: "v2_order_updated_at_index")
}

model v2_payment {
  id                   Int      @id @default(autoincrement())
  uuid                 String   @db.Char(32)
  payment              String   @db.VarChar(16)
  name                 String   @db.VarChar(255)
  icon                 String?  @db.Text
  config               String   @db.Text
  notify_domain        String?  @db.VarChar(128)
  handling_fee_fixed   Int?
  handling_fee_percent Decimal? @db.Decimal(5, 2)
  enable               Boolean  @default(false)
  sort                 Int?
  created_at           Int
  updated_at           Int
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model v2_plan {
  id                   Int     @id @default(autoincrement())
  group_id             Int?    @db.UnsignedInt
  transfer_enable      BigInt? @db.UnsignedBigInt
  name                 String  @db.VarChar(255)
  prices               Json?
  sell                 Boolean @default(false)
  speed_limit          Int?    @db.UnsignedInt
  device_limit         Int?    @db.UnsignedInt
  show                 Boolean @default(false)
  sort                 Int?
  renew                Boolean @default(true)
  content              String? @db.Text
  reset_traffic_method Int?    @default(0)
  capacity_limit       Int?    @default(0) @db.UnsignedInt
  created_at           Int
  updated_at           Int
}

model v2_plugins {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name         String    @db.VarChar(255)
  code         String    @unique(map: "v2_plugins_code_unique") @db.VarChar(255)
  version      String    @db.VarChar(50)
  is_enabled   Boolean   @default(false)
  config       Json?
  installed_at DateTime? @db.Timestamp(0)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model v2_server {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  type              String    @db.VarChar(255)
  code              String?   @db.VarChar(255)
  parent_id         Int?      @db.UnsignedInt
  group_ids         Json?
  route_ids         Json?
  name              String    @db.VarChar(255)
  rate              Decimal   @db.Decimal(8, 2)
  tags              Json?
  host              String    @db.VarChar(255)
  port              String    @db.VarChar(255)
  server_port       Int
  protocol_settings Json?
  show              Boolean   @default(false)
  sort              Int?      @db.UnsignedInt
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)

  @@unique([type, code], map: "v2_server_type_code_unique")
  @@index([sort], map: "v2_server_sort_index")
}

model v2_server_group {
  id         Int    @id @default(autoincrement())
  name       String @db.VarChar(255)
  created_at Int
  updated_at Int
}

model v2_server_route {
  id           Int     @id @default(autoincrement())
  remarks      String  @db.VarChar(255)
  match        String  @db.Text
  action       String  @db.VarChar(11)
  action_value String? @db.VarChar(255)
  created_at   Int
  updated_at   Int
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model v2_settings {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  group      String?   @db.VarChar(255)
  type       String?   @db.VarChar(255)
  name       String    @db.VarChar(255)
  value      String?   @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model v2_stat {
  id                  Int    @id @default(autoincrement())
  record_at           Int    @unique(map: "v2_stat_record_at_unique")
  record_type         String @db.Char(1)
  order_count         Int
  order_total         Int
  commission_count    Int
  commission_total    Int
  paid_count          Int
  paid_total          Int
  register_count      Int
  invite_count        Int
  transfer_used_total String @db.VarChar(32)
  created_at          Int
  updated_at          Int
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model v2_stat_server {
  id          Int    @id @default(autoincrement())
  server_id   Int
  server_type String @db.Char(11)
  u           BigInt
  d           BigInt
  record_type String @db.Char(1)
  record_at   Int
  created_at  Int
  updated_at  Int

  @@unique([server_id, server_type, record_at], map: "server_id_server_type_record_at")
  @@index([record_at], map: "record_at")
  @@index([server_id], map: "server_id")
  @@index([d], map: "v2_stat_server_d_index")
  @@index([record_at], map: "v2_stat_server_record_at_index")
  @@index([server_id], map: "v2_stat_server_server_id_index")
  @@index([u], map: "v2_stat_server_u_index")
}

model v2_stat_user {
  id          Int     @id @default(autoincrement())
  user_id     Int
  server_rate Decimal @db.Decimal(10, 2)
  u           BigInt
  d           BigInt
  record_type String  @db.Char(2)
  record_at   Int
  created_at  Int
  updated_at  Int

  @@unique([server_rate, user_id, record_at], map: "server_rate_user_id_record_at")
  @@index([d], map: "v2_stat_user_d_index")
  @@index([u], map: "v2_stat_user_u_index")
  @@index([user_id, server_rate, record_at], map: "v2_stat_user_user_id_server_rate_record_at_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model v2_ticket {
  id           Int    @id @default(autoincrement())
  user_id      Int
  subject      String @db.VarChar(255)
  level        Int
  status       Int    @default(0)
  reply_status Int    @default(1)
  created_at   Int
  updated_at   Int

  @@index([created_at], map: "v2_ticket_created_at_index")
  @@index([status], map: "v2_ticket_status_index")
}

model v2_ticket_message {
  id         Int    @id @default(autoincrement())
  user_id    Int
  ticket_id  Int
  message    String @db.Text
  created_at Int
  updated_at Int
}
